package bot

import (
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/gofiber/fiber/v2"
	"github.com/varz1/nCovBot/channel"
	"github.com/varz1/nCovBot/maker"
	"log"
	"strings"
)

//func SetUpRouter(app *fiber.App) {
//	app.Post("/"+botAPI.Token, WebHookHandler)
//}

func WebHookHandler(c *fiber.Ctx) error {
	u := new(tgbotapi.Update)
	err := c.BodyParser(&u)
	if err != nil {
		log.Println("reqËß£ÊûêÂ§±Ë¥•")
		return err
	}
	channel.UpdateChannel <- *u
	return nil
}

func baseRouter(update *tgbotapi.Update) {
	message := update.Message.Text
	if update.Message.IsCommand() {
		go commandRouter(update)
		return
	}
	if maker.IsContain(message) {
		channel.ProvinceUpdateChannel <- update
		return
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Êó†ËØ•Âú∞Âå∫Êï∞ÊçÆÊàñËÄÖËæìÂÖ•ÈîôËØØ")
		channel.MessageChannel <- msg
	}
	switch message {
	case "himybot":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "Hi‚úã :) Administrator")
		channel.MessageChannel <- msg
		return
	}
}

func commandRouter(update *tgbotapi.Update) {
	message := update.Message.Text
	switch message {
	case "/start":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"Ê¨¢Ëøé‰ΩøÁî®nCovÁñ´ÊÉÖÊï∞ÊçÆÊú∫Âô®‰∫∫ü§ñ\n"+
				"ÂäüËÉΩÂàóË°®:\n/start:‰ΩøÁî®ÊèêÁ§∫\n/list:ÊîØÊåÅÊü•ËØ¢ÁöÑÂú∞Âå∫ÂàóË°®\n/overall:Êü•ÁúãÁñ´ÊÉÖÊï∞ÊçÆÊ¶ÇËßà\n/news:Êü•ÁúãÊúÄÊñ∞Êñ∞Èóª\n"+
				"/risk:‰∏≠È´òÈ£éÈô©Âú∞Âå∫ÂàóË°®\n"+
				"\n‰ΩøÁî®Tip:\nÂèëÈÄÅÂàóË°®‰∏≠Âú∞Âå∫ÂêçÂèØËøîÂõûËØ•Âú∞Âå∫Áñ´ÊÉÖÊï∞ÊçÆÔºàÊ≥®ÊÑèÊ†ºÂºèÔºâ\n"+
				"Á§∫‰æãÊ∂àÊÅØ:‰∏äÊµ∑Â∏Ç\n"+
				"\nÊï∞ÊçÆÊù•Ëá™‰∏ÅÈ¶ôÂõ≠ Êú¨Bot‰∏çÂØπÊï∞ÊçÆË¥üË¥£")
		channel.MessageChannel <- msg
	case "/list":
		var menu = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("ÂõΩÂÜÖÂêÑÁúÅÂ∏Ç", "list-province"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("ÂõΩÂÜÖÂ§ñÂêÑÂõΩÂÆ∂Âú∞Âå∫", "list-country-1"),
			),
		)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "ËØ∑ÈÄâÊã©Âå∫Âüü")
		msg.ReplyMarkup = menu
		channel.MessageChannel <- msg
	case "/overall":
		channel.OverallUpdateChannel <- update
	case "/news":
		channel.NewsUpdateChannel <- update
	case "/risk":
		var menu = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("È´òÈ£éÈô©Âú∞Âå∫", "risk-2-1"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‰∏≠È£éÈô©Âú∞Âå∫", "risk-1-1"),
			),
		)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "ËØ∑ÈÄâÊã©Âå∫Âüü")
		msg.ReplyMarkup = menu
		channel.MessageChannel <- msg
	}
}

func callBackRouter(query *tgbotapi.CallbackQuery) {
	commandData := strings.Split(query.Data, "-")
	switch commandData[0] {
	case "list":
		channel.ListQueryChannel <- query
	case "area":
		channel.ProvinceQueryChannel <- query
	case "risk":
		channel.RiskQueryChannel <- query
	}
}
